class EmptyClass

class ExtendingClass extends EmptyClass

class ParameterisedClass(Int a, Int b)

class ExtendingParameterisedClass(Int x) extends ParameterisedClass(1, x)

abstract class AbstractClass

class ClassWithMethods:
	methodWithoutResult():
		print("a")
	methodWithResult():
		return "b"
	methodWithResult2() = "b"

class Date(Number day, Number month, Number year := 2012):
	# These statements are executed when instantiating the class.
	day   := 1
	month := 12

	Date getSystemDate() = Date(29, 12)
	(Number, Number) getMonthYearTuple() = (self.month, self.year)

class MemberInit(Number day):
	require(day in [1..31])

class Main:
	# Declare two member variables. Access to the attribute `name' is only
	# granted to this class and its super classes.
	protected name := "Max Mustermann"
	public    age  := 20

# Only accept non-red colours as valid ones.
type ValidColour c is Colour = (c /= Colour.Red)

abstract class Shape:
	# All attributes must have default values.
	fillColour := None as ValidColour?
	area := 0.0

	# Abstract methods are those without a body.
	draw(Graphics g)

class Circle(Int radius) extends Shape:
	# If private variables are not used later on by any method, the memory will
	# be freed right after their usage here.
	private back := Math.Pi * radius
	area := back * radius

	draw(Graphics g):
		if self.fillColour = None:
			g.drawOval(0, 0, radius / 2, radius / 2)
		else:
			g.setColour(fillColour)
			g.fillOval(0, 0, radius / 2, radius / 2)

class Square(Int width) extends Shape:
	draw(Graphics g):
		if self.fillColour = None:
			g.drawRect(0, 0, width, width)
		else:
			g.setColour(fillColour)
			g.fillRect(0, 0, width, width)

class Fruit:
	worth() = 5

class Apple extends Fruit:
	# When a method with the same name occurs in the super class, the `override'
	# keyword must be specified.
	override worth() = 1

# Calling a super method or accessing super values:
class Fruit:
	worth() = 5
class Apple extends Fruit:
	override worth() = super.worth() + 1

# Class with default parameters.
class Point(Int x, Int y := 0)

# CustomPoint inherits all constructors.
class CustomPoint extends Point

# CustomPoint2 inherits all constructors and overrides the first one.
class CustomPoint2 extends Point:
	override self(Int x, Int y):
		super(x, y)
		println("$x.$y")

# When a class parameter in the extended class is specified, the class still
# inherits all other constructors.
class CustomPoint3(Int x) extends Point(x + 1)

# Instantiating class `Date'.
date := Date(12, 1)

# Calling getSystemDate with no arguments.
date.getSystemDate()

# This is equivalent to:
Date.getSystemDate(date)

shape := Square(100)
shape2 := shape(fillColour := Colour.Blue)
colour := shape.fillColour
colour2 := shape.fillColour()
assert colour = colour2
shape.fillColour(Colour.Red)

t := Person("Hans Meier", 12)
println(t.name)
t2 := t(name := "Peter MÃ¼ller", age += 4)