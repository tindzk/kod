# Lambda functions are anonymous functions that are expressions. They can be
# bound to a variable name, returned or passed directly.

class ExtendedInt extends Int:
	times(Void () c):
		[1..10].each(_ -> c())

	# `cur' cannot be accessed. It only serves documentation purposes and can
	# be dropped.
	times(Void (Int cur) c):
		[1..10].each(i -> c(i))

# Define a function for applying recursively a set of functions on a string.
Str apply(Str cur, List<Str (Str input)> functions):
	match functions:
		# Like in Haskell we chop off the first element (function) and apply the
		# given string on it. Recursively, we call apply() for the remaining
		# functions.
		is hd:tl: return apply(hd(cur), tl)
		is []: return cur

# Another possible type signature here would have been:
Str apply(Str cur, [Str (Str input)] functions)

# Using higher-order functions the above function could be shortened to:
Str apply(Str cur, List<Str (Str input)> functions) =
	# The second argument here is an unnamed lambda function taking two parameters.
	functions.foldLeft(cur, (acc, cur) -> cur(acc))

# Create a lambda function with multiple statements, binding it to the variable
# name `add':
add := (a, b) ->
	println(a + b)
	return a + b
nine := add(4, 5)

# Define `add' using an unnamed lambda expression. The parameter and return
# types are derived from the function usage.
add := (a, b) -> a + b
nine := add(4, 5)

# If a lambda expression does not take any arguments, it looks like this:
f := () -> println("Hello World!")

# Define an unnamed lambda expression with exactly one argument.
onFilter := x -> x <= 3

# The _ serves as a placeholder. onFilter() could be thus shortened to:
onFilter := _ <= 3

# Lambda functions have access to all variables from the calling context.
x := 3
lambda := () ->
	x := x * 2
lambda()
println(x)
lambda()
println(x)

# Another example for lambda functions having their own referencing environment.
outer := () ->
	cnt := 0
	inner := () -> (cnt + 1)
	return inner
println(outer()) # 1
println(outer()) # 2

# Using the above onFilter() function.
elems := [1, 2, 3, 4, 5]
filtered := elems.filter(onFilter)

# We can also pass a lambda function directly as an argument.
filtered := elems.filter(x -> x <= 3)

# With the placeholder notation:
filtered := elems.filter(_ <= 3)

# Another example:
elems.reduce(0, (acc, cur) -> acc + cur)

# More examples with higher-order functions:
elems.map(x -> x * x) # Squares.
elems.map(_ * _) # Shorter (using placeholders).
elems.foldLeft(0, (acc, cur) -> acc + cur) # Sum.

# reduce()
list := [1, 2, 3, 4, 5].reduce((x, y) -> x * y)

# Use the above declared times() methods.
ExtendedInt(10).times(() -> println("Iteration"))
ExtendedInt(10).times(println) # Prints the iteration number.

list := ["red", "yellow", "orange"]
list.each(println(_))

# Sort a list of files by timestamp (<=> is explained in operators.kod):
files := files.sort((a, b) -> a.modified <=> b.modified)

# Use our defined apply() method. This works as Str.reverse(a) is equivalent to
# a.reverse().
apply("foo", List(Str.reverse, Str.toUpper))