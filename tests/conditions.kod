# --------------------------
# if..else*..else? condition
# --------------------------
action(Str s):
	if s = "hello":
		println("Hello World.")
	else s = "kod":
		println("kod rocks.")
	else:
		println("")

# -----------------------------
# expr? then : else  expression
# -----------------------------
test(Str s) =
	s = "hello" ? "Hello World" : ""

# ------------------
# a => b implication
# ------------------
s := "hello"
assert s = "hello" => test(s) = "Hello World"

s := ""
assert s /= "hello" => test(s) = ""

# -----------
# or operator
# -----------

# The LHS of the `or' statement may be a nullable or a Boolean expression. This
# construct allows the developer to use the `or' short-circuit operator for
# control the flow of evaluation as in Perl or JavaScript.

value := True
value or raise InvalidArgument()

value2 := False
value or value2 or raise InvalidArgument()

# -------------------------------
# value ?: value2  Elvis operator
# -------------------------------

# The Elvis operator can be used for Boolean values:
b := True
val := b ?: 10

# Another possible use are nullable values, see also nullable.kod.

# -------------------
# a -> b  Implication
# -------------------

# a -> b <=> not(a and not b) <=> not a or b
# b is only evaluated if a = True.

if not (hasReturnValue -> terminates):
	raise CompileException("Method needs a return or throw statement that is always reachable.", position)

# Equivalent to:
if hasReturnValue and not terminates:
	raise CompileException("Method needs a return or throw statement that is always reachable.", position)