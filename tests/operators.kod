# The following trait is defined internally by kod and used for some type
# classes such as `Enumeration'.
trait Ordering<T>:
	Int compare(T value)
	Bool < (T value) = self.compare(value) < 0
	Bool > (T value) = self.compare(value) > 0
	Bool <=(T value) = self.compare(value) <= 0
	Bool >=(T value) = self.compare(value) >= 0

# --------------------
# Operator overloading
# --------------------

# Implement the trait `Ordering'.
class Money(Int amount) with Ordering<Money>:
	Int compare(Money value) =
		self.amount <=> value.amount

# Overload the plus operator.
class Meter(Double value):
	Meter +(Meter m) = Meter(m.value + value)

# ----------------
# ++, -- operators
# ----------------

# On integers the ++ operator increases a value by 1. This operator cannot be
# overwritten.
i := 1
j := a++
assert j = 2

# On streams or iterators the ++ operator is used to move it ahead by one element.
iter := [1..2].iter()
assert iter.cur() = 1

iter2 := iter.next()
assert iter2.cur() = 2

iter3 := iter2++
assert iter3.cur() = None

# ------------
# <=> operator
# ------------

# <=> is the compare operator. It is equivalent to calling the method compare()
# on an object that implements the trait `Ordering'.